"""add demand options for all nutrients

Revision ID: 0b803ff60a56
Revises: f808a24f39c6
Create Date: 2024-01-21 12:42:35.613146

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "0b803ff60a56"
down_revision = "f808a24f39c6"
branch_labels = None
depends_on = None


def upgrade():
    conn = op.get_bind()
    field = sa.Table(
        "field",
        sa.MetaData(),
        sa.Column("field_id", sa.Integer, primary_key=True),
        sa.Column("base_id", sa.Integer),
        sa.Column("sub_suffix", sa.Integer),
        sa.Column("area", sa.Float),
        sa.Column("year", sa.Integer),
        sa.Column("red_region", sa.Boolean),
        sa.Column("field_type", sa.String),
        sa.Column("demand_type", sa.String),
    )
    result = conn.execute(sa.select(field)).fetchall()
    data = {}
    for field_id, *_, demand in result:
        data[field_id] = demand

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("field", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "demand_p2o5",
                sa.Enum("removal", "demand", name="demandtype"),
                server_default="demand",
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "demand_k2o",
                sa.Enum("removal", "demand", name="demandtype"),
                server_default="demand",
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "demand_mgo",
                sa.Enum("removal", "demand", name="demandtype"),
                server_default="demand",
                nullable=True,
            )
        )
        batch_op.drop_column("demand_type")
    # ### end Alembic commands ###

    conn = op.get_bind()
    field = sa.Table(
        "field",
        sa.MetaData(),
        sa.Column("field_id", sa.Integer, primary_key=True),
        sa.Column("base_id", sa.Integer),
        sa.Column("sub_suffix", sa.Integer),
        sa.Column("area", sa.Float),
        sa.Column("year", sa.Integer),
        sa.Column("red_region", sa.Boolean),
        sa.Column("field_type", sa.String),
        sa.Column("demand_p2o5", sa.String),
        sa.Column("demand_k2o", sa.String),
        sa.Column("demand_mgo", sa.String),
    )
    for field_id, demand in data.items():
        conn.execute(
            field.update()
            .where(field.c.field_id == field_id)
            .values({"demand_p2o5": demand, "demand_k2o": demand, "demand_mgo": demand})
        )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("field", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "demand_type",
                sa.Enum("removal", "demand", name="demandtype"),
                server_default="demand",
                nullable=True,
            )
        )
        batch_op.drop_column("demand_mgo")
        batch_op.drop_column("demand_k2o")
        batch_op.drop_column("demand_p2o5")

    # ### end Alembic commands ###
