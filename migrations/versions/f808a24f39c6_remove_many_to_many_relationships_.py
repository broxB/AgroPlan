"""remove many-to-many relationships+tables, remove fertilizerusage table and change some enum type names

Revision ID: f808a24f39c6
Revises: fc9602c1c08b
Create Date: 2024-01-12 15:29:39.937101

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "f808a24f39c6"
down_revision = "fc9602c1c08b"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("crop", schema=None) as batch_op:
        batch_op.alter_column(
            "target_demand",
            existing_type=sa.FLOAT(),
            type_=sa.Integer(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "target_yield",
            existing_type=sa.FLOAT(),
            type_=sa.Integer(),
            existing_nullable=True,
        )
        batch_op.drop_column("legume_rate")
        batch_op.drop_column("n")

    with op.batch_alter_table("cultivation", schema=None) as batch_op:
        batch_op.alter_column(
            "yield",
            existing_type=sa.FLOAT(),
            type_=sa.Integer(),
            existing_nullable=True,
        )

    with op.batch_alter_table("modifier", schema=None) as batch_op:
        batch_op.alter_column(
            "modification",
            existing_type=sa.VARCHAR(length=7),
            type_=sa.Enum(
                "n", "p2o5", "k2o", "mgo", "s", "cao", "nh4", name="nutrienttype"
            ),
            existing_nullable=True,
        )

    with op.batch_alter_table("fertilization", schema=None) as batch_op:
        batch_op.add_column(sa.Column("field_id", sa.Integer(), nullable=True))
        batch_op.alter_column(
            "cut_timing",
            existing_type=sa.VARCHAR(length=11),
            type_=sa.Enum(
                "first_cut",
                "second_cut",
                "third_cut",
                "fourth_cut",
                "none",
                name="cuttiming",
            ),
            existing_nullable=True,
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_fertilization_field_id_field"),
            "field",
            ["field_id"],
            ["field_id"],
        )

    conn = op.get_bind()

    # declare ORM table views
    field_fert_table = sa.Table(
        "field_fertilization",
        sa.MetaData(),
        sa.Column("field_id", sa.Integer()),
        sa.Column("fertilization_id", sa.Integer()),
    )
    fert_table = sa.Table(
        "fertilization",
        sa.MetaData(),
        sa.Column("fertilization_id", sa.Integer, primary_key=True),
        sa.Column("field_id", sa.Integer),
        sa.Column("cultivation_id", sa.Integer),
        sa.Column("fertilizer_id", sa.Integer),
        sa.Column("cut_timing", sa.String),
        sa.Column("amount", sa.Float),
        sa.Column("measure", sa.String),
        sa.Column("month", sa.Integer),
    )
    cult_table = sa.Table(
        "cultivation",
        sa.MetaData(),
        sa.Column("cultivation_id", sa.Integer, primary_key=True),
        sa.Column("field_id", sa.Integer),
        sa.Column("cultivation_type", sa.String),
        sa.Column("crop_id", sa.Integer),
        sa.Column("yield", sa.Integer),
        sa.Column("protein", sa.Float),
        sa.Column("residues", sa.String),
        sa.Column("legume_rate", sa.String),
        sa.Column("nmin_30", sa.Integer),
        sa.Column("nmin_60", sa.Integer),
        sa.Column("nmin_90", sa.Integer),
    )

    # move field_id from many-to-many relationship table into fertilization table
    result = conn.execute(sa.select(field_fert_table)).fetchall()
    for field_id, fert_id in result:
        conn.execute(
            fert_table.update()
            .where(fert_table.c.fertilization_id == fert_id)
            .values(field_id=field_id)
        )

    # update enum name changes
    conn.execute(
        fert_table.update()
        .where(fert_table.c.cut_timing == "non_mowable")
        .values(cut_timing="none")
    )
    conn.execute(
        cult_table.update()
        .where(cult_table.c.residues == "main_no_residues")
        .values(residues="none")
    )

    # drop unnecessary tables
    op.drop_table("field_fertilization")
    op.drop_table("fertilizer_usage")
    op.drop_table("field_soil_sample")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("modifier", schema=None) as batch_op:
        batch_op.alter_column(
            "modification",
            existing_type=sa.Enum(
                "n", "p2o5", "k2o", "mgo", "s", "cao", "nh4", name="nutrienttype"
            ),
            type_=sa.VARCHAR(length=7),
            existing_nullable=True,
        )

    with op.batch_alter_table("fertilization", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_fertilization_field_id_field"), type_="foreignkey"
        )
        batch_op.alter_column(
            "cut_timing",
            existing_type=sa.Enum(
                "first_cut",
                "second_cut",
                "third_cut",
                "fourth_cut",
                "none",
                name="cuttiming",
            ),
            type_=sa.VARCHAR(length=11),
            existing_nullable=True,
        )
        batch_op.drop_column("field_id")

    with op.batch_alter_table("cultivation", schema=None) as batch_op:
        batch_op.alter_column(
            "yield",
            existing_type=sa.Integer(),
            type_=sa.FLOAT(),
            existing_nullable=True,
        )

    with op.batch_alter_table("crop", schema=None) as batch_op:
        batch_op.add_column(sa.Column("n", sa.FLOAT(), nullable=True))
        batch_op.add_column(
            sa.Column("legume_rate", sa.VARCHAR(length=16), nullable=True)
        )
        batch_op.alter_column(
            "target_yield",
            existing_type=sa.Integer(),
            type_=sa.FLOAT(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "target_demand",
            existing_type=sa.Integer(),
            type_=sa.FLOAT(),
            existing_nullable=True,
        )

    op.create_table(
        "field_soil_sample",
        sa.Column("field_id", sa.INTEGER(), nullable=True),
        sa.Column("sample_id", sa.INTEGER(), nullable=True),
        sa.ForeignKeyConstraint(
            ["field_id"], ["field.field_id"], name="fk_field_soil_sample_field_id_field"
        ),
        sa.ForeignKeyConstraint(
            ["sample_id"],
            ["soil_sample.sample_id"],
            name="fk_field_soil_sample_sample_id_soil_sample",
        ),
    )
    op.create_table(
        "fertilizer_usage",
        sa.Column("user_id", sa.INTEGER(), nullable=True),
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("fertilizer_name", sa.VARCHAR(), nullable=True),
        sa.Column("year", sa.INTEGER(), nullable=True),
        sa.Column("amount", sa.FLOAT(), nullable=True),
        sa.ForeignKeyConstraint(
            ["fertilizer_name"],
            ["fertilizer.name"],
            name="fk_fertilizer_usage_fertilizer_name_fertilizer",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.user_id"], name="fk_fertilizer_usage_user_id_user"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_fertilizer_usage"),
        sa.UniqueConstraint(
            "user_id", "fertilizer_name", "year", name="uq_fertilizer_usage_user_id"
        ),
    )
    op.create_table(
        "field_fertilization",
        sa.Column("field_id", sa.INTEGER(), nullable=True),
        sa.Column("fertilization_id", sa.INTEGER(), nullable=True),
        sa.ForeignKeyConstraint(
            ["fertilization_id"],
            ["fertilization.fertilization_id"],
            name="fk_field_fertilization_fertilization_id_fertilization",
        ),
        sa.ForeignKeyConstraint(
            ["field_id"],
            ["field.field_id"],
            name="fk_field_fertilization_field_id_field",
        ),
    )
    # ### end Alembic commands ###
