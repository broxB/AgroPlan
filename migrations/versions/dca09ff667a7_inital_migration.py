"""inital migration

Revision ID: dca09ff667a7
Revises: 
Create Date: 2022-09-14 10:52:56.916965

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'dca09ff667a7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('base_field',
    sa.Column('base_id', sa.Integer(), nullable=False),
    sa.Column('prefix', sa.Integer(), nullable=True),
    sa.Column('suffix', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('base_id'),
    sa.UniqueConstraint('prefix', 'suffix', name='unique_base_fields')
    )
    op.create_table('crop',
    sa.Column('crop_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('class', sa.Enum('catch_crop', 'main_crop', 'second_crop', 'first_cut', 'second_cut', 'third_cut', 'fourth_cut', name='cropclass'), nullable=True),
    sa.Column('type', sa.Enum('rotating_fallow_with_legume', 'rotating_fallow', 'permanent_fallow', 'permanent_grassland', 'alfalfa', 'alfalfa_grass', 'clover', 'clover_grass', 'sugar_beets', 'canola', 'legume_grain', 'cabbage', 'field_grass', 'grain', 'corn', 'potato', 'vegetable', 'non_legume', 'legume', 'other_catch_crop', name='croptype'), nullable=True),
    sa.Column('kind', sa.String(), nullable=True),
    sa.Column('feedable', sa.Boolean(), nullable=True),
    sa.Column('remains', sa.Boolean(), nullable=True),
    sa.Column('legume_rate', sa.Enum('grass_less_5', 'grass_less_10', 'grass_less_20', 'grass_greater_20', 'crop_0', 'crop_10', 'crop_20', 'crop_30', 'crop_40', 'crop_50', 'crop_60', 'crop_70', 'crop_80', 'crop_90', 'crop_100', 'catch_25', 'catch_50', 'catch_75', 'none', name='legumetype'), nullable=True),
    sa.Column('nmin_depth', sa.Integer(), nullable=True),
    sa.Column('target_demand', sa.Float(asdecimal=True), nullable=True),
    sa.Column('target_yield', sa.Float(asdecimal=True), nullable=True),
    sa.Column('var_yield', sa.PickleType(), nullable=True),
    sa.Column('target_protein', sa.Float(asdecimal=True), nullable=True),
    sa.Column('var_protein', sa.Float(asdecimal=True), nullable=True),
    sa.Column('n', sa.Float(asdecimal=True), nullable=True),
    sa.Column('p2o5', sa.Float(asdecimal=True), nullable=True),
    sa.Column('k2o', sa.Float(asdecimal=True), nullable=True),
    sa.Column('mgo', sa.Float(asdecimal=True), nullable=True),
    sa.Column('byproduct', sa.String(), nullable=True),
    sa.Column('byp_ratio', sa.Float(asdecimal=True), nullable=True),
    sa.Column('byp_n', sa.Float(asdecimal=True), nullable=True),
    sa.Column('byp_p2o5', sa.Float(asdecimal=True), nullable=True),
    sa.Column('byp_k2o', sa.Float(asdecimal=True), nullable=True),
    sa.Column('byp_mgo', sa.Float(asdecimal=True), nullable=True),
    sa.PrimaryKeyConstraint('crop_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('fertilizer',
    sa.Column('fertilizer_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('class', sa.Enum('organic', 'mineral', name='fertclass'), nullable=True),
    sa.Column('type', sa.Enum('digestate', 'slurry', 'manure', 'dry_manure', 'compost', 'k', 'n', 'n_k', 'n_p', 'n_s', 'n_p_k', 'n_p_k_s', 'p', 'p_k', 'lime', 'misc', 'auxiliary', name='ferttype'), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('unit', sa.Enum('dt', 'to', 'cbm', name='unittype'), nullable=True),
    sa.Column('price', sa.Float(asdecimal=True), nullable=True),
    sa.Column('n', sa.Float(asdecimal=True), nullable=True),
    sa.Column('p2o5', sa.Float(asdecimal=True), nullable=True),
    sa.Column('k2o', sa.Float(asdecimal=True), nullable=True),
    sa.Column('mgo', sa.Float(asdecimal=True), nullable=True),
    sa.Column('s', sa.Float(asdecimal=True), nullable=True),
    sa.Column('cao', sa.Float(asdecimal=True), nullable=True),
    sa.Column('nh4', sa.Float(asdecimal=True), nullable=True),
    sa.PrimaryKeyConstraint('fertilizer_id'),
    sa.UniqueConstraint('name', 'year', name='unique_fertilizers')
    )
    op.create_table('fertilizer_usage',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('fertilizer_name', sa.String(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Float(asdecimal=True), nullable=True),
    sa.ForeignKeyConstraint(['fertilizer_name'], ['fertilizer.name'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('fertilizer_name', 'year', name='unique_fertilizers')
    )
    op.create_table('field',
    sa.Column('field_id', sa.Integer(), nullable=False),
    sa.Column('base_id', sa.Integer(), nullable=True),
    sa.Column('sub_suffix', sa.Integer(), nullable=True),
    sa.Column('area', sa.Float(asdecimal=True), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('red_region', sa.Boolean(), nullable=True),
    sa.Column('field_type', sa.Enum('grassland', 'cropland', 'exchanged_land', 'fallow_grassland', 'fallow_cropland', name='fieldtype'), nullable=True),
    sa.Column('demand_type', sa.Enum('removal', 'demand', name='demandtype'), nullable=True),
    sa.ForeignKeyConstraint(['base_id'], ['base_field.base_id'], ),
    sa.PrimaryKeyConstraint('field_id'),
    sa.UniqueConstraint('sub_suffix', 'base_id', 'year', name='unique_fields')
    )
    op.create_table('soil_sample',
    sa.Column('sample_id', sa.Integer(), nullable=False),
    sa.Column('base_id', sa.Integer(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('ph', sa.Float(asdecimal=True), nullable=True),
    sa.Column('p2o5', sa.Float(asdecimal=True), nullable=True),
    sa.Column('k2o', sa.Float(asdecimal=True), nullable=True),
    sa.Column('mg', sa.Float(asdecimal=True), nullable=True),
    sa.Column('soil_type', sa.Enum('sand', 'light_loamy_sand', 'strong_loamy_sand', 'sandy_to_silty_loam', 'clayey_loam_to_clay', 'moor', name='soiltype'), nullable=True),
    sa.Column('humus', sa.Enum('less_4', 'less_8', 'less_15', 'less_30', 'more_30', name='humustype'), nullable=True),
    sa.ForeignKeyConstraint(['base_id'], ['base_field.base_id'], ),
    sa.PrimaryKeyConstraint('sample_id'),
    sa.UniqueConstraint('base_id', 'year', name='unique_samples')
    )
    op.create_table('cultivation',
    sa.Column('cultivation_id', sa.Integer(), nullable=False),
    sa.Column('field_id', sa.Integer(), nullable=True),
    sa.Column('crop_class', sa.Enum('catch_crop', 'main_crop', 'second_crop', 'first_cut', 'second_cut', 'third_cut', 'fourth_cut', name='cropclass'), nullable=True),
    sa.Column('crop_id', sa.Integer(), nullable=True),
    sa.Column('yield', sa.Float(asdecimal=True), nullable=True),
    sa.Column('protein', sa.Float(asdecimal=True), nullable=True),
    sa.Column('remains', sa.Enum('stayed', 'removed', 'no_remains', 'frozen', 'not_frozen_fall', 'not_frozen_spring', 'catch_crop_used', name='remainstype'), nullable=True),
    sa.Column('legume_rate', sa.Enum('grass_less_5', 'grass_less_10', 'grass_less_20', 'grass_greater_20', 'crop_0', 'crop_10', 'crop_20', 'crop_30', 'crop_40', 'crop_50', 'crop_60', 'crop_70', 'crop_80', 'crop_90', 'crop_100', 'catch_25', 'catch_50', 'catch_75', 'none', name='legumetype'), nullable=True),
    sa.Column('nmin', sa.PickleType(), nullable=True),
    sa.ForeignKeyConstraint(['crop_id'], ['crop.crop_id'], ),
    sa.ForeignKeyConstraint(['field_id'], ['field.field_id'], ),
    sa.PrimaryKeyConstraint('cultivation_id'),
    sa.UniqueConstraint('field_id', 'crop_class', name='unique_cultivations')
    )
    op.create_table('field_soil_sample',
    sa.Column('field_id', sa.Integer(), nullable=True),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['field_id'], ['field.field_id'], ),
    sa.ForeignKeyConstraint(['sample_id'], ['soil_sample.sample_id'], )
    )
    op.create_table('saldo',
    sa.Column('field_id', sa.Integer(), nullable=False),
    sa.Column('n', sa.Float(asdecimal=True), nullable=True),
    sa.Column('p2o5', sa.Float(asdecimal=True), nullable=True),
    sa.Column('k2o', sa.Float(asdecimal=True), nullable=True),
    sa.Column('mgo', sa.Float(asdecimal=True), nullable=True),
    sa.Column('s', sa.Float(asdecimal=True), nullable=True),
    sa.Column('cao', sa.Float(asdecimal=True), nullable=True),
    sa.Column('nges', sa.Float(asdecimal=True), nullable=True),
    sa.ForeignKeyConstraint(['field_id'], ['field.field_id'], ),
    sa.PrimaryKeyConstraint('field_id')
    )
    op.create_table('fertilization',
    sa.Column('fertilization_id', sa.Integer(), nullable=False),
    sa.Column('cultivation_id', sa.Integer(), nullable=True),
    sa.Column('fertilizer_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Float(asdecimal=True), nullable=True),
    sa.Column('measure', sa.Enum('fall', 'spring', 'first_first_n_fert', 'first_second_n_fert', 'first_n_fert', 'second_n_fert', 'third_n_fert', 'fourth_n_fert', 'first_base_fert', 'second_base_fert', 'third_base_fert', 'fourth_base_fert', 'lime_fert', 'misc_fert', name='measuretype'), nullable=True),
    sa.Column('month', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cultivation_id'], ['cultivation.cultivation_id'], ),
    sa.ForeignKeyConstraint(['fertilizer_id'], ['fertilizer.fertilizer_id'], ),
    sa.PrimaryKeyConstraint('fertilization_id')
    )
    op.create_table('field_fertilization',
    sa.Column('field_id', sa.Integer(), nullable=True),
    sa.Column('fertilization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['fertilization_id'], ['fertilization.fertilization_id'], ),
    sa.ForeignKeyConstraint(['field_id'], ['field.field_id'], )
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('field_fertilization')
    op.drop_table('fertilization')
    op.drop_table('saldo')
    op.drop_table('field_soil_sample')
    op.drop_table('cultivation')
    op.drop_table('soil_sample')
    op.drop_table('field')
    op.drop_table('fertilizer_usage')
    op.drop_table('fertilizer')
    op.drop_table('crop')
    op.drop_table('base_field')
    # ### end Alembic commands ###
